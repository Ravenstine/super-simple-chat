== README

This is a simple chat that I have made using ActionController::Live.
It requires no database or model.  However, you will need:

* Rails >= 4.0.0
* Ruby >= 1.9
* Puma

== Sever Sent Events

The Live feature in ActionController allows the app to send events from the server to the client.  This means the server can trigger something to happen in JavaScript without the need for WebSockets or other protocols.

This little chat app should be helpful for anyone who wants to understand how server-sent events can be accomplished in Rails.  It uses a default stack(aside from Puma), and extra features to the chat can be added very easily once you understand what's going on.

I made a few hacks to work around the shortcomings of ActionController::Live.  The biggest hack is the use of creating a separate Ruby thread to create a "heartbeat" to detect when a user has left the chat in order to close the connection.  I am a novice programmer so I am not aware of any reason why this is an unacceptable solution.

== Installation
Just:
<tt>bundle install</tt>
then:
<tt>rails s</tt>

== Why won't my connections die when I deploy my app to Heroku?

In this case, the routing proxy that Heroku uses prevents the server from knowing if a client has disconnected.  This means that response.stream.closed? will always return false.  Unfortunately, the routing in Heroku cannot be configured by the developer.
However, enabling WebSockets seems to solve this problem.  You can do this by going to the root directory of your project and running the following:
<tt>heroku labs:enable websockets</tt>

I'm not 100% sure why this works; I suspect that it configures the routing in a way that makes it support WebSockets in a way that happens to also benefits ActionController::Live.  Now response.stream.closed? will return true when the stream is dead.  Let's hope that Heroku keeps this feature!

== License

This app is public domain.  Have at it!
